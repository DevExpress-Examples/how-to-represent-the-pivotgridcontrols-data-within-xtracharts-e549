'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
Imports System
Namespace dxKB3226


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Partial Public Class DataSet1
		Inherits System.Data.DataSet

		Private tableEmployees As EmployeesDataTable

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
				If (ds.Tables("Employees") IsNot Nothing) Then
					MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Employees() As EmployeesDataTable
			Get
				Return Me.tableEmployees
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As Global.System.Data.DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Employees") IsNot Nothing) Then
					MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
			Dim stream As New Global.System.IO.MemoryStream()
			Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableEmployees = (CType(MyBase.Tables("Employees"), EmployeesDataTable))
			If (initTable = True) Then
				If (Me.tableEmployees IsNot Nothing) Then
					Me.tableEmployees.InitVars()
				End If
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.Locale = New Global.System.Globalization.CultureInfo("ru-RU")
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableEmployees = New EmployeesDataTable()
			MyBase.Tables.Add(Me.tableEmployees)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeEmployees() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New DataSet1()
			Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New Global.System.IO.MemoryStream()
				Dim s2 As New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class EmployeesDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnCategoryID As Global.System.Data.DataColumn

			Private columnDiscontinued As Global.System.Data.DataColumn

			Private columnEAN13 As Global.System.Data.DataColumn

			Private columnProductID As Global.System.Data.DataColumn

			Private columnProductName As Global.System.Data.DataColumn

			Private columnQuantityPerUnit As Global.System.Data.DataColumn

			Private columnReorderLevel As Global.System.Data.DataColumn

			Private columnSupplierID As Global.System.Data.DataColumn

			Private columnUnitPrice As Global.System.Data.DataColumn

			Private columnUnitsInStock As Global.System.Data.DataColumn

			Private columnUnitsOnOrder As Global.System.Data.DataColumn

			Private columnDiscount As Global.System.Data.DataColumn

			Private columnOrderID As Global.System.Data.DataColumn

			Private columnExpr1 As Global.System.Data.DataColumn

			Private columnQuantity As Global.System.Data.DataColumn

			Private columnExpr2 As Global.System.Data.DataColumn

			Private columnCustomerID As Global.System.Data.DataColumn

			Private columnEmployeeID As Global.System.Data.DataColumn

			Private columnFreight As Global.System.Data.DataColumn

			Private columnOrderDate As Global.System.Data.DataColumn

			Private columnExpr3 As Global.System.Data.DataColumn

			Private columnRequiredDate As Global.System.Data.DataColumn

			Private columnShipAddress As Global.System.Data.DataColumn

			Private columnShipCity As Global.System.Data.DataColumn

			Private columnShipCountry As Global.System.Data.DataColumn

			Private columnShipName As Global.System.Data.DataColumn

			Private columnShippedDate As Global.System.Data.DataColumn

			Private columnShipPostalCode As Global.System.Data.DataColumn

			Private columnShipRegion As Global.System.Data.DataColumn

			Private columnShipVia As Global.System.Data.DataColumn

			Private columnAddress As Global.System.Data.DataColumn

			Private columnBirthDate As Global.System.Data.DataColumn

			Private columnCity As Global.System.Data.DataColumn

			Private columnCountry As Global.System.Data.DataColumn

			Private columnExpr4 As Global.System.Data.DataColumn

			Private columnExtension As Global.System.Data.DataColumn

			Private columnFirstName As Global.System.Data.DataColumn

			Private columnHireDate As Global.System.Data.DataColumn

			Private columnHomePhone As Global.System.Data.DataColumn

			Private columnLastName As Global.System.Data.DataColumn

			Private columnNotes As Global.System.Data.DataColumn

			Private columnPhoto As Global.System.Data.DataColumn

			Private columnPostalCode As Global.System.Data.DataColumn

			Private columnRegion As Global.System.Data.DataColumn

			Private columnReportsTo As Global.System.Data.DataColumn

			Private columnTitle As Global.System.Data.DataColumn

			Private columnTitleOfCourtesy As Global.System.Data.DataColumn

			Private columnExpr5 As Global.System.Data.DataColumn

			Private columnCategoryName As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnPicture As Global.System.Data.DataColumn

			Private columnExpr6 As Global.System.Data.DataColumn

			Private columnExpr7 As Global.System.Data.DataColumn

			Private columnCompanyName As Global.System.Data.DataColumn

			Private columnContactName As Global.System.Data.DataColumn

			Private columnContactTitle As Global.System.Data.DataColumn

			Private columnExpr8 As Global.System.Data.DataColumn

			Private columnExpr9 As Global.System.Data.DataColumn

			Private columnFax As Global.System.Data.DataColumn

			Private columnPhone As Global.System.Data.DataColumn

			Private columnExpr10 As Global.System.Data.DataColumn

			Private columnExpr11 As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Employees"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CategoryIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCategoryID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property DiscontinuedColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDiscontinued
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property EAN13Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnEAN13
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ProductIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnProductID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnProductName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property QuantityPerUnitColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnQuantityPerUnit
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ReorderLevelColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReorderLevel
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property SupplierIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnSupplierID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnUnitPrice
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property UnitsInStockColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnUnitsInStock
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property UnitsOnOrderColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnUnitsOnOrder
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDiscount
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property OrderIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOrderID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr1
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnQuantity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr2Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr2
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CustomerIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property EmployeeIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property FreightColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFreight
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property OrderDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOrderDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr3Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr3
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property RequiredDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRequiredDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipAddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipCityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipCountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShippedDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShippedDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipPostalCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipPostalCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipRegionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipRegion
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipViaColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipVia
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnBirthDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr4Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr4
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ExtensionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnExtension
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property HireDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHireDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHomePhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnNotes
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PhotoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPhoto
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ReportsToColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReportsTo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitle
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property TitleOfCourtesyColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitleOfCourtesy
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr5Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr5
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CategoryNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCategoryName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPicture
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr6Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr6
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr7Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr7
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCompanyName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnContactName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ContactTitleColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnContactTitle
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr8Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr8
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr9Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr9
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFax
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr10Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr10
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Expr11Column() As Global.System.Data.DataColumn
				Get
					Return Me.columnExpr11
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As EmployeesRow
				Get
					Return (CType(Me.Rows(index), EmployeesRow))
				End Get
			End Property

			Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler

			Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddEmployeesRow(ByVal CategoryID As Integer, ByVal Discontinued As Boolean, ByVal EAN13 As String, ByVal ProductName As String, ByVal QuantityPerUnit As String, ByVal ReorderLevel As Short, ByVal SupplierID As Integer, ByVal UnitPrice As Decimal, ByVal UnitsInStock As Short, ByVal UnitsOnOrder As Short, ByVal Discount As Single, ByVal OrderID As Integer, ByVal Expr1 As Integer, ByVal Quantity As Short, ByVal Expr2 As Decimal, ByVal CustomerID As String, ByVal EmployeeID As Integer, ByVal Freight As Decimal, ByVal OrderDate As System.DateTime, ByVal RequiredDate As System.DateTime, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipCountry As String, ByVal ShipName As String, ByVal ShippedDate As System.DateTime, ByVal ShipPostalCode As String, ByVal ShipRegion As String, ByVal ShipVia As Integer, ByVal Address As String, ByVal BirthDate As System.DateTime, ByVal City As String, ByVal Country As String, ByVal Extension As String, ByVal FirstName As String, ByVal HireDate As System.DateTime, ByVal HomePhone As String, ByVal LastName As String, ByVal Notes As String, ByVal Photo() As Byte, ByVal PostalCode As String, ByVal Region As String, ByVal ReportsTo As Integer, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal CategoryName As String, ByVal Description As String, ByVal Picture() As Byte, ByVal Expr6 As String, ByVal Expr7 As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Expr8 As String, ByVal Expr9 As String, ByVal Fax As String, ByVal Phone As String, ByVal Expr10 As String, ByVal Expr11 As String) As EmployeesRow
				Dim rowEmployeesRow As EmployeesRow = (CType(Me.NewRow(), EmployeesRow))
				Dim columnValuesArray() As Object = { CategoryID, Discontinued, EAN13, Nothing, ProductName, QuantityPerUnit, ReorderLevel, SupplierID, UnitPrice, UnitsInStock, UnitsOnOrder, Discount, OrderID, Expr1, Quantity, Expr2, CustomerID, EmployeeID, Freight, OrderDate, Nothing, RequiredDate, ShipAddress, ShipCity, ShipCountry, ShipName, ShippedDate, ShipPostalCode, ShipRegion, ShipVia, Address, BirthDate, City, Country, Nothing, Extension, FirstName, HireDate, HomePhone, LastName, Notes, Photo, PostalCode, Region, ReportsTo, Title, TitleOfCourtesy, Nothing, CategoryName, Description, Picture, Expr6, Expr7, CompanyName, ContactName, ContactTitle, Expr8, Expr9, Fax, Phone, Expr10, Expr11}
				rowEmployeesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowEmployeesRow)
				Return rowEmployeesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As EmployeesDataTable = (CType(MyBase.Clone(), EmployeesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New EmployeesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnCategoryID = MyBase.Columns("CategoryID")
				Me.columnDiscontinued = MyBase.Columns("Discontinued")
				Me.columnEAN13 = MyBase.Columns("EAN13")
				Me.columnProductID = MyBase.Columns("ProductID")
				Me.columnProductName = MyBase.Columns("ProductName")
				Me.columnQuantityPerUnit = MyBase.Columns("QuantityPerUnit")
				Me.columnReorderLevel = MyBase.Columns("ReorderLevel")
				Me.columnSupplierID = MyBase.Columns("SupplierID")
				Me.columnUnitPrice = MyBase.Columns("UnitPrice")
				Me.columnUnitsInStock = MyBase.Columns("UnitsInStock")
				Me.columnUnitsOnOrder = MyBase.Columns("UnitsOnOrder")
				Me.columnDiscount = MyBase.Columns("Discount")
				Me.columnOrderID = MyBase.Columns("OrderID")
				Me.columnExpr1 = MyBase.Columns("Expr1")
				Me.columnQuantity = MyBase.Columns("Quantity")
				Me.columnExpr2 = MyBase.Columns("Expr2")
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnEmployeeID = MyBase.Columns("EmployeeID")
				Me.columnFreight = MyBase.Columns("Freight")
				Me.columnOrderDate = MyBase.Columns("OrderDate")
				Me.columnExpr3 = MyBase.Columns("Expr3")
				Me.columnRequiredDate = MyBase.Columns("RequiredDate")
				Me.columnShipAddress = MyBase.Columns("ShipAddress")
				Me.columnShipCity = MyBase.Columns("ShipCity")
				Me.columnShipCountry = MyBase.Columns("ShipCountry")
				Me.columnShipName = MyBase.Columns("ShipName")
				Me.columnShippedDate = MyBase.Columns("ShippedDate")
				Me.columnShipPostalCode = MyBase.Columns("ShipPostalCode")
				Me.columnShipRegion = MyBase.Columns("ShipRegion")
				Me.columnShipVia = MyBase.Columns("ShipVia")
				Me.columnAddress = MyBase.Columns("Address")
				Me.columnBirthDate = MyBase.Columns("BirthDate")
				Me.columnCity = MyBase.Columns("City")
				Me.columnCountry = MyBase.Columns("Country")
				Me.columnExpr4 = MyBase.Columns("Expr4")
				Me.columnExtension = MyBase.Columns("Extension")
				Me.columnFirstName = MyBase.Columns("FirstName")
				Me.columnHireDate = MyBase.Columns("HireDate")
				Me.columnHomePhone = MyBase.Columns("HomePhone")
				Me.columnLastName = MyBase.Columns("LastName")
				Me.columnNotes = MyBase.Columns("Notes")
				Me.columnPhoto = MyBase.Columns("Photo")
				Me.columnPostalCode = MyBase.Columns("PostalCode")
				Me.columnRegion = MyBase.Columns("Region")
				Me.columnReportsTo = MyBase.Columns("ReportsTo")
				Me.columnTitle = MyBase.Columns("Title")
				Me.columnTitleOfCourtesy = MyBase.Columns("TitleOfCourtesy")
				Me.columnExpr5 = MyBase.Columns("Expr5")
				Me.columnCategoryName = MyBase.Columns("CategoryName")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnPicture = MyBase.Columns("Picture")
				Me.columnExpr6 = MyBase.Columns("Expr6")
				Me.columnExpr7 = MyBase.Columns("Expr7")
				Me.columnCompanyName = MyBase.Columns("CompanyName")
				Me.columnContactName = MyBase.Columns("ContactName")
				Me.columnContactTitle = MyBase.Columns("ContactTitle")
				Me.columnExpr8 = MyBase.Columns("Expr8")
				Me.columnExpr9 = MyBase.Columns("Expr9")
				Me.columnFax = MyBase.Columns("Fax")
				Me.columnPhone = MyBase.Columns("Phone")
				Me.columnExpr10 = MyBase.Columns("Expr10")
				Me.columnExpr11 = MyBase.Columns("Expr11")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnCategoryID = New Global.System.Data.DataColumn("CategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategoryID)
				Me.columnDiscontinued = New Global.System.Data.DataColumn("Discontinued", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDiscontinued)
				Me.columnEAN13 = New Global.System.Data.DataColumn("EAN13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEAN13)
				Me.columnProductID = New Global.System.Data.DataColumn("ProductID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductID)
				Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductName)
				Me.columnQuantityPerUnit = New Global.System.Data.DataColumn("QuantityPerUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnQuantityPerUnit)
				Me.columnReorderLevel = New Global.System.Data.DataColumn("ReorderLevel", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReorderLevel)
				Me.columnSupplierID = New Global.System.Data.DataColumn("SupplierID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSupplierID)
				Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUnitPrice)
				Me.columnUnitsInStock = New Global.System.Data.DataColumn("UnitsInStock", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUnitsInStock)
				Me.columnUnitsOnOrder = New Global.System.Data.DataColumn("UnitsOnOrder", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUnitsOnOrder)
				Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDiscount)
				Me.columnOrderID = New Global.System.Data.DataColumn("OrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderID)
				Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr1)
				Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnQuantity)
				Me.columnExpr2 = New Global.System.Data.DataColumn("Expr2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr2)
				Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnEmployeeID = New Global.System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEmployeeID)
				Me.columnFreight = New Global.System.Data.DataColumn("Freight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFreight)
				Me.columnOrderDate = New Global.System.Data.DataColumn("OrderDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderDate)
				Me.columnExpr3 = New Global.System.Data.DataColumn("Expr3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr3)
				Me.columnRequiredDate = New Global.System.Data.DataColumn("RequiredDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRequiredDate)
				Me.columnShipAddress = New Global.System.Data.DataColumn("ShipAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipAddress)
				Me.columnShipCity = New Global.System.Data.DataColumn("ShipCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipCity)
				Me.columnShipCountry = New Global.System.Data.DataColumn("ShipCountry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipCountry)
				Me.columnShipName = New Global.System.Data.DataColumn("ShipName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipName)
				Me.columnShippedDate = New Global.System.Data.DataColumn("ShippedDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShippedDate)
				Me.columnShipPostalCode = New Global.System.Data.DataColumn("ShipPostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipPostalCode)
				Me.columnShipRegion = New Global.System.Data.DataColumn("ShipRegion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipRegion)
				Me.columnShipVia = New Global.System.Data.DataColumn("ShipVia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipVia)
				Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAddress)
				Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBirthDate)
				Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCity)
				Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCountry)
				Me.columnExpr4 = New Global.System.Data.DataColumn("Expr4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr4)
				Me.columnExtension = New Global.System.Data.DataColumn("Extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExtension)
				Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFirstName)
				Me.columnHireDate = New Global.System.Data.DataColumn("HireDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHireDate)
				Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHomePhone)
				Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLastName)
				Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnNotes)
				Me.columnPhoto = New Global.System.Data.DataColumn("Photo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPhoto)
				Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPostalCode)
				Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRegion)
				Me.columnReportsTo = New Global.System.Data.DataColumn("ReportsTo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReportsTo)
				Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitle)
				Me.columnTitleOfCourtesy = New Global.System.Data.DataColumn("TitleOfCourtesy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitleOfCourtesy)
				Me.columnExpr5 = New Global.System.Data.DataColumn("Expr5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr5)
				Me.columnCategoryName = New Global.System.Data.DataColumn("CategoryName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategoryName)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPicture)
				Me.columnExpr6 = New Global.System.Data.DataColumn("Expr6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr6)
				Me.columnExpr7 = New Global.System.Data.DataColumn("Expr7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr7)
				Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCompanyName)
				Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnContactName)
				Me.columnContactTitle = New Global.System.Data.DataColumn("ContactTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnContactTitle)
				Me.columnExpr8 = New Global.System.Data.DataColumn("Expr8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr8)
				Me.columnExpr9 = New Global.System.Data.DataColumn("Expr9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr9)
				Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFax)
				Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPhone)
				Me.columnExpr10 = New Global.System.Data.DataColumn("Expr10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr10)
				Me.columnExpr11 = New Global.System.Data.DataColumn("Expr11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExpr11)
				Me.columnProductID.AutoIncrement = True
				Me.columnExpr3.AutoIncrement = True
				Me.columnExpr4.AutoIncrement = True
				Me.columnExpr5.AutoIncrement = True
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewEmployeesRow() As EmployeesRow
				Return (CType(Me.NewRow(), EmployeesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New EmployeesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(EmployeesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.EmployeesRowChangedEvent IsNot Nothing) Then
					RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.EmployeesRowChangingEvent IsNot Nothing) Then
					RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.EmployeesRowDeletedEvent IsNot Nothing) Then
					RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.EmployeesRowDeletingEvent IsNot Nothing) Then
					RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New DataSet1()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "EmployeesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Partial Public Class EmployeesRow
			Inherits System.Data.DataRow

			Private tableEmployees As EmployeesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableEmployees = (CType(Me.Table, EmployeesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CategoryID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.CategoryIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CategoryID' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.CategoryIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Discontinued() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableEmployees.DiscontinuedColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Discontinued' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Boolean)
					Me(Me.tableEmployees.DiscontinuedColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property EAN13() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.EAN13Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EAN13' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.EAN13Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ProductID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.ProductIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ProductID' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.ProductIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ProductName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ProductNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ProductNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property QuantityPerUnit() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.QuantityPerUnitColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'QuantityPerUnit' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.QuantityPerUnitColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ReorderLevel() As Short
				Get
					Try
						Return (CShort(Fix(Me(Me.tableEmployees.ReorderLevelColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ReorderLevel' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Short)
					Me(Me.tableEmployees.ReorderLevelColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property SupplierID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.SupplierIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'SupplierID' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.SupplierIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property UnitPrice() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableEmployees.UnitPriceColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableEmployees.UnitPriceColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property UnitsInStock() As Short
				Get
					Try
						Return (CShort(Fix(Me(Me.tableEmployees.UnitsInStockColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'UnitsInStock' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Short)
					Me(Me.tableEmployees.UnitsInStockColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property UnitsOnOrder() As Short
				Get
					Try
						Return (CShort(Fix(Me(Me.tableEmployees.UnitsOnOrderColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'UnitsOnOrder' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Short)
					Me(Me.tableEmployees.UnitsOnOrderColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Discount() As Single
				Get
					Try
						Return (CSng(Me(Me.tableEmployees.DiscountColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Single)
					Me(Me.tableEmployees.DiscountColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OrderID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.OrderIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'OrderID' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.OrderIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr1() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.Expr1Column))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.Expr1Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Quantity() As Short
				Get
					Try
						Return (CShort(Fix(Me(Me.tableEmployees.QuantityColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Short)
					Me(Me.tableEmployees.QuantityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr2() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableEmployees.Expr2Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr2' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableEmployees.Expr2Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CustomerID() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CustomerIDColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerID' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.CustomerIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property EmployeeID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.EmployeeIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeID' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.EmployeeIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Freight() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableEmployees.FreightColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Freight' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableEmployees.FreightColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OrderDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.OrderDateColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'OrderDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableEmployees.OrderDateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr3() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.Expr3Column))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr3' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.Expr3Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property RequiredDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.RequiredDateColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'RequiredDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableEmployees.RequiredDateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipAddress() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ShipAddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipAddress' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ShipAddressColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipCity() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ShipCityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipCity' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ShipCityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipCountry() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ShipCountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipCountry' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ShipCountryColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ShipNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ShipNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShippedDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.ShippedDateColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableEmployees.ShippedDateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipPostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ShipPostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipPostalCode' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ShipPostalCodeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipRegion() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ShipRegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipRegion' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ShipRegionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipVia() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.ShipViaColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipVia' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.ShipViaColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.AddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.AddressColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property BirthDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.BirthDateColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableEmployees.BirthDateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.CityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.CountryColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr4() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.Expr4Column))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr4' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.Expr4Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Extension() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ExtensionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Extension' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ExtensionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property FirstName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.FirstNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.FirstNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property HireDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.HireDateColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HireDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableEmployees.HireDateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property HomePhone() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.HomePhoneColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.HomePhoneColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property LastName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.LastNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.LastNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Notes() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.NotesColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.NotesColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Photo() As Byte()
				Get
					Try
						Return (CType(Me(Me.tableEmployees.PhotoColumn), Byte()))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Photo' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte())
					Me(Me.tableEmployees.PhotoColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.PostalCodeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.RegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.RegionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ReportsTo() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.ReportsToColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ReportsTo' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.ReportsToColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Title() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.TitleColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property TitleOfCourtesy() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleOfCourtesyColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'TitleOfCourtesy' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.TitleOfCourtesyColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr5() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.Expr5Column))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr5' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableEmployees.Expr5Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CategoryName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CategoryNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CategoryName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.CategoryNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Description() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.DescriptionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Picture() As Byte()
				Get
					Try
						Return (CType(Me(Me.tableEmployees.PictureColumn), Byte()))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte())
					Me(Me.tableEmployees.PictureColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr6() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.Expr6Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr6' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.Expr6Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr7() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.Expr7Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr7' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.Expr7Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CompanyName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CompanyNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.CompanyNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ContactName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ContactNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ContactNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ContactTitle() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ContactTitleColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactTitle' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.ContactTitleColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr8() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.Expr8Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr8' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.Expr8Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr9() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.Expr9Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr9' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.Expr9Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Fax() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.FaxColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.FaxColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Phone() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PhoneColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.PhoneColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr10() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.Expr10Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr10' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.Expr10Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Expr11() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.Expr11Column)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Expr11' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableEmployees.Expr11Column) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCategoryIDNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CategoryIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCategoryIDNull()
				Me(Me.tableEmployees.CategoryIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsDiscontinuedNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.DiscontinuedColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetDiscontinuedNull()
				Me(Me.tableEmployees.DiscontinuedColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsEAN13Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.EAN13Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetEAN13Null()
				Me(Me.tableEmployees.EAN13Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsProductIDNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ProductIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetProductIDNull()
				Me(Me.tableEmployees.ProductIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsProductNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ProductNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetProductNameNull()
				Me(Me.tableEmployees.ProductNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsQuantityPerUnitNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.QuantityPerUnitColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetQuantityPerUnitNull()
				Me(Me.tableEmployees.QuantityPerUnitColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsReorderLevelNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ReorderLevelColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetReorderLevelNull()
				Me(Me.tableEmployees.ReorderLevelColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsSupplierIDNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.SupplierIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetSupplierIDNull()
				Me(Me.tableEmployees.SupplierIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsUnitPriceNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.UnitPriceColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetUnitPriceNull()
				Me(Me.tableEmployees.UnitPriceColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsUnitsInStockNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.UnitsInStockColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetUnitsInStockNull()
				Me(Me.tableEmployees.UnitsInStockColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsUnitsOnOrderNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.UnitsOnOrderColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetUnitsOnOrderNull()
				Me(Me.tableEmployees.UnitsOnOrderColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsDiscountNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.DiscountColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetDiscountNull()
				Me(Me.tableEmployees.DiscountColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsOrderIDNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.OrderIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetOrderIDNull()
				Me(Me.tableEmployees.OrderIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr1Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr1Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr1Null()
				Me(Me.tableEmployees.Expr1Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsQuantityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.QuantityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetQuantityNull()
				Me(Me.tableEmployees.QuantityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr2Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr2Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr2Null()
				Me(Me.tableEmployees.Expr2Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CustomerIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCustomerIDNull()
				Me(Me.tableEmployees.CustomerIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsEmployeeIDNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.EmployeeIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetEmployeeIDNull()
				Me(Me.tableEmployees.EmployeeIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsFreightNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.FreightColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetFreightNull()
				Me(Me.tableEmployees.FreightColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsOrderDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.OrderDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetOrderDateNull()
				Me(Me.tableEmployees.OrderDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr3Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr3Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr3Null()
				Me(Me.tableEmployees.Expr3Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsRequiredDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.RequiredDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetRequiredDateNull()
				Me(Me.tableEmployees.RequiredDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipAddressNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipAddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipAddressNull()
				Me(Me.tableEmployees.ShipAddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipCityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipCityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipCityNull()
				Me(Me.tableEmployees.ShipCityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipCountryNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipCountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipCountryNull()
				Me(Me.tableEmployees.ShipCountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipNameNull()
				Me(Me.tableEmployees.ShipNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShippedDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShippedDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShippedDateNull()
				Me(Me.tableEmployees.ShippedDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipPostalCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipPostalCodeNull()
				Me(Me.tableEmployees.ShipPostalCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipRegionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipRegionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipRegionNull()
				Me(Me.tableEmployees.ShipRegionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipViaNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ShipViaColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipViaNull()
				Me(Me.tableEmployees.ShipViaColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.AddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetAddressNull()
				Me(Me.tableEmployees.AddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsBirthDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.BirthDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetBirthDateNull()
				Me(Me.tableEmployees.BirthDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCityNull()
				Me(Me.tableEmployees.CityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCountryNull()
				Me(Me.tableEmployees.CountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr4Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr4Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr4Null()
				Me(Me.tableEmployees.Expr4Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExtensionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ExtensionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExtensionNull()
				Me(Me.tableEmployees.ExtensionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.FirstNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetFirstNameNull()
				Me(Me.tableEmployees.FirstNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsHireDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HireDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetHireDateNull()
				Me(Me.tableEmployees.HireDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsHomePhoneNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HomePhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetHomePhoneNull()
				Me(Me.tableEmployees.HomePhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsLastNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.LastNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetLastNameNull()
				Me(Me.tableEmployees.LastNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsNotesNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.NotesColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetNotesNull()
				Me(Me.tableEmployees.NotesColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPhotoNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PhotoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPhotoNull()
				Me(Me.tableEmployees.PhotoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PostalCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPostalCodeNull()
				Me(Me.tableEmployees.PostalCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.RegionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetRegionNull()
				Me(Me.tableEmployees.RegionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsReportsToNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ReportsToColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetReportsToNull()
				Me(Me.tableEmployees.ReportsToColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsTitleNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetTitleNull()
				Me(Me.tableEmployees.TitleColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsTitleOfCourtesyNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleOfCourtesyColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetTitleOfCourtesyNull()
				Me(Me.tableEmployees.TitleOfCourtesyColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr5Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr5Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr5Null()
				Me(Me.tableEmployees.Expr5Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCategoryNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CategoryNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCategoryNameNull()
				Me(Me.tableEmployees.CategoryNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetDescriptionNull()
				Me(Me.tableEmployees.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPictureNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PictureColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPictureNull()
				Me(Me.tableEmployees.PictureColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr6Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr6Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr6Null()
				Me(Me.tableEmployees.Expr6Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr7Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr7Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr7Null()
				Me(Me.tableEmployees.Expr7Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCompanyNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CompanyNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCompanyNameNull()
				Me(Me.tableEmployees.CompanyNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsContactNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ContactNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetContactNameNull()
				Me(Me.tableEmployees.ContactNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsContactTitleNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ContactTitleColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetContactTitleNull()
				Me(Me.tableEmployees.ContactTitleColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr8Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr8Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr8Null()
				Me(Me.tableEmployees.Expr8Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr9Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr9Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr9Null()
				Me(Me.tableEmployees.Expr9Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsFaxNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.FaxColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetFaxNull()
				Me(Me.tableEmployees.FaxColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPhoneNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPhoneNull()
				Me(Me.tableEmployees.PhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr10Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr10Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr10Null()
				Me(Me.tableEmployees.Expr10Column) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExpr11Null() As Boolean
				Return Me.IsNull(Me.tableEmployees.Expr11Column)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExpr11Null()
				Me(Me.tableEmployees.Expr11Column) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class EmployeesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As EmployeesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As EmployeesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As EmployeesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591